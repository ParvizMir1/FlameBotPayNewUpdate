import telebot
import bot_bd
import buttonsbot
import config
from main import str_msg
from datetime import datetime
from pytz import timezone


token = ('5827149235:AAEpIzi0vS1YK781Cv9tW7HsEzwyhFaF2VE')
#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('5827149235:AAEpIzi0vS1YK781Cv9tW7HsEzwyhFaF2VE', skip_pending=True)

chanel_id = -1001833445663


@bot.message_handler(chat_types=['text'])
def str_msg1(message):
    user_id = message.from_user.id
    if message.text == 'üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç':
        admin_id = 1819193668
        photo = bot_bd.view_system(admin_id, 'xid')
        a = telebot.types.ReplyKeyboardRemove()
        bot.send_photo(user_id, photo[2], 'üíµ* –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π 1XBET UZS ID *:', reply_markup=a, parse_mode='Markdown')
        bot.register_next_step_handler(message, get_id_pay)

    elif message.text == 'üì§–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏':
        admin_id = 1819193668
        photo = bot_bd.view_system(admin_id, 'withdraw')
        a = telebot.types.ReplyKeyboardRemove()
        bot.send_photo(user_id, photo[2], '*–ù–∞–ª–∏—á–Ω—ã–µ > –ì–æ—Ä–æ–¥: –ù—É–∫—É—Å (–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω) > –£–ª–∏—Ü–∞: –í–µ—á–Ω—ã–π –æ–≥–æ–Ω—å (24/7)*'
                       , reply_markup=a, parse_mode='Markdown')
        bot.send_message(user_id, 'üíµ* –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π 1XBET UZS ID *:', parse_mode='Markdown')
        bot.register_next_step_handler(message, get_sum_withdraw)

    elif message.text == '‚òéÔ∏è –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(user_id, '*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ *üëá',
                             reply_markup=buttonsbot.th_support(), parse_mode='Markdown')
        bot.send_message(user_id, '*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª *', reply_markup=buttonsbot.menu_button(),
                         parse_mode='Markdown')
        bot.register_next_step_handler(message, str_msg)

    elif message.text == '/admin':
        bot.register_next_step_handler(message, main.start_admin)

    elif message.text == '/start':
        bot.send_message(user_id, '–ï—à–µ —Ä–∞–∑ /start')
        bot.register_next_step_handler(message, main.start_message)

    else:
        bot.send_message(user_id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π')
        bot.register_next_step_handler(message, str_msg)

def bot_stop(message):
    user_id = message.from_user.id
    bot.send_message(user_id, config.bot_stop, parse_mode='Markdown')
    bot.register_next_step_handler(message, main.start_message)

def get_sum_withdraw(message):
    user_id = message.from_user.id
    if message.text:
        id_for_pay = message.text
        bot.send_message(user_id, '*–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏* :',
                         reply_markup=buttonsbot.return_pay(), parse_mode='Markdown')
        bot.register_next_step_handler(message, get_id_withdraw, id_for_pay)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        bot.send_message(user_id, '–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ ID')
        bot.register_next_step_handler(message, get_sum_withdraw)

def get_id_withdraw(message, id_for_pay):
    user_id = message.from_user.id
    if message.text:
        sum_for_pay = message.text
        admin_id = 1819193668
        photo = bot_bd.view_system(admin_id, 'withdraw_pass')
        bot.send_photo(user_id, photo[2], '*–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª 1XBET*', parse_mode='Markdown')
        bot.register_next_step_handler(message, get_password_withdraw, id_for_pay, sum_for_pay)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        bot.send_message(user_id, '–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞')
        bot.register_next_step_handler(message, get_id_withdraw, id_for_pay)

def get_password_withdraw(message, id_for_pay, sum_for_pay):
    user_id = message.from_user.id
    if message.text:
        password = message.text
        bot.send_message(user_id, '*üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –∫–∞—Ä—Ç—ã :*', parse_mode='Markdown')
        bot.register_next_step_handler(message, fin_withdraw, id_for_pay, password, sum_for_pay)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        bot.send_message(user_id, '–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –∫–æ–¥')
        bot.register_next_step_handler(message, get_password_withdraw, id_for_pay, sum_for_pay)


def fin_withdraw(message, id_for_pay, password, sum_for_pay):
    user_id = message.from_user.id
    if message.text:
        card_number = message.text
        bot_bd.delete_sum_temporary(user_id)
        bot_bd.add_sum(user_id, sum_for_pay)
        bot_bd.add_sum_temporary(user_id, sum_for_pay)
        sum = bot_bd.view_withdraw_sum(user_id)
        bot_bd.add_withdraw(user_id, id_for_pay, password, card_number)
        bot_bd.delete_withdraw(user_id)
        bot_bd.add_withdraw_temporary(user_id, id_for_pay, password, card_number)
        bot.send_message(user_id, f'‚è≥*–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ*\n\n'
                                  f'*–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {user_id}*\n\n*'
                                  f'–ï—Å–ª–∏ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏*Ô∏è'
                         , reply_markup=buttonsbot.menu_button(), parse_mode='Markdown')
        chanel_id1 = -1001672272729
        dt_format = "%d-%m-%Y %H:%M:%S"
        a = datetime.now(timezone('Asia/Tashkent'))
        user_nik = message.from_user.first_name
        bot.send_message(chanel_id1, f'–ù–∏–∫ : {user_nik}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {user_id}\n–í—Ä–µ–º—è : {a.strftime(dt_format)}')
        bot.send_message(user_id, '*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ *üëá',
                         reply_markup=buttonsbot.th_support(), parse_mode='Markdown')
        msg = bot_bd.view_withdraw(user_id)
        bot.send_message(chanel_id, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\nTelegram : {msg[0]}\n\n1xBet ID: `{msg[1]}`\n'
                                    f'Pay Amount : `{sum[-1]}`\nCod: `{msg[2]}`\nCard number: `{msg[3]}`\nTime : {a.strftime(dt_format)}', parse_mode='Markdown')
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞')
        bot.register_next_step_handler(message, fin_withdraw, id_for_pay, password, sum_for_pay)

def get_id_pay(message):
    user_id = message.from_user.id
    user_id_pay = message.text
    v = str(user_id_pay)
    if 8 <= len(v) <= 9:
        a = telebot.types.ReplyKeyboardRemove()
        bot.send_message(user_id, config.pay_min, reply_markup=a, parse_mode='Markdown')
        bot.register_next_step_handler(message, get_payment_sum, user_id_pay)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        bot.send_message(user_id, '–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ ID')
        bot.register_next_step_handler(message, get_id_pay)

def get_payment_sum(message, user_id_pay):
    user_id = message.from_user.id
    sum = message.text
    b = user_id_pay
    try:
        n = int(sum)
        if 10000 <= n <= 50000000:
            bot_bd.add_payment(user_id, user_id_pay, sum)
            bot.send_message(user_id, config.pay_info, parse_mode='Markdown',
                                 reply_markup=buttonsbot.ret_and_accept())
            bot.register_next_step_handler(message, get_check, user_id_pay, sum)

        elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
            bot.send_message(user_id, '–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
            bot.register_next_step_handler(message, str_msg)

        else:
            bot.send_message(user_id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞')
            bot.register_next_step_handler(message, get_payment_sum, user_id_pay)

    except ValueError:
        bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞')
        bot.register_next_step_handler(message, get_payment_sum, user_id_pay)

def get_check(message, user_id_pay, user_sum):
    user_id = message.from_user.id
    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ':
        bot.send_message(user_id, '*–û—Ç–ø—Ä–∞—Ç–µ –ß–µ–∫ [–°–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ]*', reply_markup=buttonsbot.return_pay(), parse_mode='Markdown')
        bot.register_next_step_handler(message, get_payment_finish, user_sum, user_id_pay)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        bot.send_message(user_id, '–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
                                  ' –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å'
                                  , reply_markup=buttonsbot.ret_and_accept())
        bot.register_next_step_handler(message, get_check, user_id_pay, user_sum)


def get_payment_finish(message, user_sum, user_id_pay):
    user_id = message.from_user.id
    user_check = message.photo

    if user_check:

        bot.send_message(user_id, f'‚è≥*–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ*',
                         reply_markup=buttonsbot.menu_button(), parse_mode='Markdown')
        bot.send_message(user_id, f'*–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {user_id}\n\n–ï—Å–ª–∏ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç,*'
                                  '*–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏*'
                                  , reply_markup=buttonsbot.th_support(), parse_mode='Markdown')
        chanel_id1 = -1001672272729
        dt_format = "%d-%m-%Y %H:%M:%S"
        a = datetime.now(timezone('Asia/Tashkent'))
        user_nik = message.from_user.first_name
        bot.send_message(chanel_id1, f'–ù–∏–∫ : {user_nik}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {user_id}\n–í—Ä–µ–º—è : {a.strftime(dt_format)}')
        bot_bd.add_payment(user_id, user_id_pay, user_sum)
        bot_bd.add_check(user_id, user_check[-1].file_id)
        bot_bd.delete_upd(user_id)
        bot_bd.add_temporary(user_id, user_id_pay, user_sum, user_check[-1].file_id)
        msg = bot_bd.view_check(user_id)
        bot.send_photo(-1001833445663, msg[3], f'Telegram: {msg[0]}\n\n'
                                               f'1xBet ID: `{msg[1]}`\nPay Amount: `{msg[2]}`\nTime : {a.strftime(dt_format)}'
                       , parse_mode='Markdown')
        bot.register_next_step_handler(message, str_msg)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå':
        bot.send_message(user_id, '–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É', reply_markup=buttonsbot.return_pay())
        bot.register_next_step_handler(message, get_check)


