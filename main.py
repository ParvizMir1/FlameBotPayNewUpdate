import time

import telebot
import bot_bd
import buttonsbot
import config
import requests
from threading import Thread
from datetime import datetime
from pytz import timezone
import json


token = '6061662953:AAFLdR-ihJY8seooDIjIzuHZU8InAEVoUbk'
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('6061662953:AAFLdR-ihJY8seooDIjIzuHZU8InAEVoUbk', skip_pending=True)
chanel_id = -1001833445663


# –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def start_admin(message):
    user_id = message.from_user.id
    admin_id = 1819193668
    admin_id1 = 5225418097
    if admin_id == user_id:
        bot.send_message(user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω', reply_markup=buttonsbot.admin_menu())
        bot.register_next_step_handler(message, admin_commands)

    elif admin_id1 == user_id:
        bot.send_message(user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω', reply_markup=buttonsbot.admin_menu())
        bot.register_next_step_handler(message, admin_commands)

    else:
        bot.send_message(user_id, '–û—à–∏–±–∫–∞')


def admin_commands(message):
    user_id = message.from_user.id
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ :\n\n[`xid` = ID 1xbet –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è]\n'
                                  '[`withdraw` = —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞]\n'
                                  '[`withdraw_pass` = —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø–æ –≤–ø–∏—Å–∞–Ω–∏—é –∫–æ–¥–∞]', parse_mode='Markdown')
        bot.register_next_step_handler(message, get_photo_name)

    elif message.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
        bot.register_next_step_handler(message, delete_photo)

    elif message.text == '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞':
        bot_bd.add_admin_id(user_id)
        bot.send_message(user_id, '–ë–æ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        bot.register_next_step_handler(message, admin_commands)

    elif message.text == '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞':
        all_user = bot_bd.check_user_rass()

        for i in all_user:
            bot.send_message(i[0],
                             '–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
            break
        bot_bd.unblock_admin(user_id)
        bot.send_message(user_id, '–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        bot.register_next_step_handler(message, admin_commands)

    elif message.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
        bot.send_message(user_id, '–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø', reply_markup=buttonsbot.type_all())
        bot.register_next_step_handler(message, set_type)

    elif message.text == '–ü—Ä–æ–≤–µ—Ä–∫–∞':
        thwt = Thread(target=proverka, args=(message,))
        thwt.start()
        bot.register_next_step_handler(message, admin_commands)

    elif message.text == '–£–¥–∞–ª–∏—Ç—å USER':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ id')
        bot.register_next_step_handler(message, delete_user)

    elif message.text == '–°—á–µ—Ç –∫–∞—Å—Å—ã':
        request = requests.post('http://ck83858.tw1.ru/api/balans.php').text
        bot.send_message(user_id, f'{request} UZS')
        bot.register_next_step_handler(message, admin_commands)

    elif message.text == '–ó–∞–ø—Ä–æ—Å':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ ID')
        bot.register_next_step_handler(message, get_id_for_check)

    else:
        bot.send_message(user_id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')
        bot.register_next_step_handler(message, admin_commands)


def get_id_for_check(message):
    user_id = message.from_user.id
    id = message.text
    check = bot_bd.view_checks(id)
    dt_format = "%d-%m-%Y %H:%M:%S"
    a = datetime.now(timezone('Asia/Tashkent'))
    chanel_id12 = -1001913028408
    bot.send_message(id, f'üÜî {id}\n‚¨Ü–í—ã–ø–ª–∞—Ç–∞: {check[1]} UZS\n‚¨á–ü–æ–ª—É—á–µ–Ω–∏—è: {check[1]} UZS\nüí≥CARD UZS: {check[2]}\n'
                         f'üìÖ–î–∞—Ç–∞: {a.strftime(dt_format)}\nüìù–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ‚úÖ', parse_mode='MarkDown')
    bot.send_message(chanel_id12, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\nTelegram : {user_id}\n\n1xBet ID: {check[3]}\n'
                                    f'Pay Amount : `{check[1]}`\nCard number: `{check[2]}`\nTime :'
                                  f' {a.strftime(dt_format)}\n–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ‚úÖ', parse_mode='MarkDown')
    bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ')
    bot.register_next_step_handler(message, admin_commands)


def proverka(message):
    ADM_ID = 1819193668
    all_user = bot_bd.check_user_rass()
    for i in all_user:
        try:
            r = requests.post('https://api.telegram.org/bot' + token + '/sendMessage',
                              data={'chat_id': i[0], 'text': '–ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ üçÄ'})
            if r.status_code == 200:
                pass
            else:
                requests.post('https://api.telegram.org/bot' + token + '/sendMessage',
                              data={'chat_id': ADM_ID,
                                    'text': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' + '\n' + 'id: ' + str(i[0]) + '\n' + str(
                                        r.json()['description'])})
        except Exception as error:
            requests.post('https://api.telegram.org/bot' + token + '/sendMessage',
                          data={'chat_id': ADM_ID, 'text': 'Exception –æ—Ç–ø—Ä–∞–≤–∫–∏' + '\n' + str(error)})


def delete_user(message):
    user_id = message.from_user.id
    id = message.text
    bot_bd.delete_user(id)
    bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', reply_markup=buttonsbot.admin_menu())
    bot.register_next_step_handler(message, admin_commands)


def set_type(message):
    user_id = message.from_user.id
    if message.text == '–§–∞–π–ª/–¢–µ–∫—Å—Ç':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')
        bot.register_next_step_handler(message, recursiy1)

    elif message.text == '–§–æ—Ç–æ/–¢–µ–∫—Å—Ç':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')
        bot.register_next_step_handler(message, get_photo_1)

    else:
        bot.send_message(user_id, '–í–µ—Ä–Ω—É–ª–∏—Å—å', reply_markup=buttonsbot.admin_menu())
        bot.register_next_step_handler(message, admin_commands)


def get_photo_1(message):
    user_id = message.from_user.id
    text_op1 = message.text
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', reply_markup=buttonsbot.admin_menu())
    bot.register_next_step_handler(message, get_photo_3, text_op1)


def get_photo_2(message, text1, text_op1):
    user_id = message.from_user.id
    bot_bd.delete_photo(user_id)
    bot_bd.add_photo_text(user_id, text_op1, text1)
    msg = bot_bd.view_photo_text(user_id)
    all_user = bot_bd.check_user_rass()
    print(all_user)
    try:
        for i in all_user:
            print(i)
            bot.send_photo(i[0], msg[-1], msg[1])
            continue
    except:
        bot.send_message(user_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–¥–∞–ª–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


def get_photo_3(message, text_op1):
    text1 = message.photo[-1].file_id
    try:
        thw = Thread(target=get_photo_2, args=(message, text1, text_op1))
        thw.start()
        bot.register_next_step_handler(message, admin_commands)
    except:
        bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–¥–∞–ª–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.register_next_step_handler(message, admin_commands)


def recursiy1(message):
    user_id = message.from_user.id
    text_op = message.text
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', reply_markup=buttonsbot.admin_menu())
    bot.register_next_step_handler(message, th1, text_op)


def recursiy(message, text, text_op):
    user_id = message.from_user.id
    bot_bd.delete_document(user_id)
    bot_bd.add_document_text(user_id, text_op, text)
    msg = bot_bd.view_document_text(user_id)
    all_user = bot_bd.check_user_rass()
    print(all_user)
    try:
        for i in all_user:
            print(i)
            bot.send_document(i[0], msg[-1], msg[1])
    except:
        bot.send_message(user_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–¥–∞–ª–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


def th1(message, text_op):
    text = message.document.file_id
    try:
        th = Thread(target=recursiy, args=(message, text, text_op))
        th.start()
        bot.register_next_step_handler(message, admin_commands)
    except:
        bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–¥–∞–ª–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.register_next_step_handler(message, admin_commands)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
def delete_photo(message):
    user_id = message.from_user.id
    photo_name = message.text
    bot_bd.delete_system(photo_name)
    bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
    bot.register_next_step_handler(message, admin_commands)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –±–¥
def get_photo_name(message):
    user_id = message.from_user.id
    photo_name = message.text
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ')
    bot.register_next_step_handler(message, get_photo, photo_name)


def get_photo(message, photo_name):
    user_id = message.from_user.id
    photo = message.photo
    if message.photo:
        bot_bd.add_for_system(user_id, photo_name, photo[-1].file_id)
        bot.send_message(user_id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n–í—ã –¥–æ–±–∞–≤–∏–ª–∏ : {photo_name}')
        bot.register_next_step_handler(message, admin_commands)

    else:
        bot.send_message(user_id, '–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ')
        bot.register_next_step_handler(message, get_photo)
#################################


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    checker = bot_bd.check_user(user_id)
    admin_id = 5225418097
    adm_id = 1819193668
    checker1 = bot_bd.check_id_admin(admin_id)
    print(checker)
    if checker1 == True:
        if checker:
            bot.send_message(user_id, text=f'*FlamePayBot* - _–ø–æ–ø–æ–ª–Ω—è–µ–º UZS —Å—á–µ—Ç 1XBET\n\n–î–ª—è_ '
                                           f'_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá_', parse_mode='Markdown',
                             reply_markup=buttonsbot.menu_button())
            bot.register_next_step_handler(message, str_msg)

        elif message.text == '/admin':
            bot.register_next_step_handler(message, start_admin)

        else:
            bot_bd.add_user(user_id)
            print(1)
            bot.send_message(user_id, text=f'*FlamePayBot* - _–ø–æ–ø–æ–ª–Ω—è–µ–º UZS —Å—á–µ—Ç 1XBET\n\n–î–ª—è_ '
                                      f'_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞_\n', parse_mode='Markdown',
                             reply_markup=buttonsbot.get_contact())
            bot.register_next_step_handler(message, get_contact)

    elif message.text == '/start':
        bot.send_message(user_id, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—à–µ–Ω –≤–≤–µ–¥–∏—Ç–µ /start')
        bot.register_next_step_handler(message, start_message)

    elif message.text == '/admin':
        bot.register_next_step_handler(message, start_admin)

    else:
        bot.send_message(user_id, '–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω', reply_markup=buttonsbot.bot_unsuported())
        bot.register_next_step_handler(message, bot_stop)


def get_contact(message):
    user_id = message.from_user.id
    bot.send_message(user_id, f'*FlamePayBot* - _–ø–æ–ø–æ–ª–Ω—è–µ–º UZS —Å—á–µ—Ç 1XBET\n\n–î–ª—è_'
                              f'\n_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá_',
                     reply_markup=buttonsbot.menu_button(), parse_mode='MarkDown')
    number = message.contact.phone_number
    bot_bd.add_number(user_id, number)
    bot.register_next_step_handler(message, str_msg)


def select_language(message):
    user_id = message.from_user.id
    if message.text == 'üá∑üá∫–†—É—Å–∫–∏–π':
        bot.send_message(user_id, '–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    elif message.text == 'üá∫üáøUzbek tili':
        bot.send_message(user_id, 'Ozbek tili tanlandi', reply_markup=buttonsbot.menu_button_uz())
        bot.register_next_step_handler(message, str_msg_uz)

    else:
        bot.send_message(user_id, '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(message, select_language)


@bot.message_handler(chat_types=['text'])
def str_msg(message):
    user_id = message.from_user.id
    if message.text == 'üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç':
        admin_id = 1819193668
        photo = bot_bd.view_system(admin_id, 'xid')
        chat = bot.send_photo(user_id, photo[2], 'üíµ* –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π 1XBET UZS ID *:',
                              reply_markup=buttonsbot.return_pay(), parse_mode='Markdown')
        bot.register_next_step_handler(message, get_id_pay, chat)

    elif message.text == 'üì§–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏':
            admin_id = 1819193668
            photo = bot_bd.view_system(admin_id, 'withdraw')
            chat = bot.send_photo(user_id, photo[2], '*–ê–¥—Ä–µ—Å –∫–∞—Å—Å—ã* :\n*–ì–æ—Ä–æ–¥: –ù—É–∫—É—Å (–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω)*\n'
                                                     '*–£–ª–∏—Ü–∞: –í–µ—á–Ω—ã–π –æ–≥–æ–Ω—å (24/7)*',
                                  reply_markup=buttonsbot.return_pay(), parse_mode='Markdown')
            chat1 = bot.send_message(user_id, 'üíµ* –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π 1XBET UZS ID *:', parse_mode='Markdown')
            bot.register_next_step_handler(message, get_sum_withdraw, chat, chat1)

    elif message.text == '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ üá∑üá∫ üá∫üáø':
        user_id = message.from_user.id
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —è–∑—ã–∫', reply_markup=buttonsbot.set_language())
        bot.register_next_step_handler(message, select_language)

    elif message.text == '‚òéÔ∏è –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(user_id, '*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞:* @FlamePaySupport',
                         reply_markup=buttonsbot.menu_button(), parse_mode='Markdown')
        bot.register_next_step_handler(message, str_msg)

    elif message.text == '/admin':
        bot.register_next_step_handler(message, start_admin)

    elif message.text == '/start':
        bot.send_message(user_id, '–ï—à–µ —Ä–∞–∑ /start')
        bot.register_next_step_handler(message, start_message)

    elif message.text == '/xbet':
        bot.register_next_step_handler(message, xbet)

    elif message.text == '/uz':
        bot.send_message(user_id, 'Uzbek tili tanlandi', reply_markup=buttonsbot.menu_button_uz())
        bot.register_next_step_handler(message, str_msg_uz)

    else:
        bot.send_message(user_id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π')
        bot.register_next_step_handler(message, str_msg)


def bot_stop(message):
    user_id = message.from_user.id
    bot.send_message(user_id, config.bot_stop, parse_mode='Markdown')
    bot.register_next_step_handler(message, start_message)


def get_sum_withdraw(message, chat, chat1):
    user_id = message.from_user.id
    if message.text:
        id_for_pay = message.text
        bot.delete_message(user_id, chat.message_id)
        bot.delete_message(user_id, chat1.message_id)
        bot.delete_message(user_id, message.message_id)
        try:
            select = requests.post(f'http://ck83858.tw1.ru/api/without.php?user_id={id_for_pay}').text
            select = json.loads(select)
            print(select)
            select_data = select['Data'][0][3]
            print(select)
            sum = select['Data'][0][5]
            print(sum)
            if message.text:
                if select_data == '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ':
                    id = 1819193668
                    photo = bot_bd.view_system(id, 'withdraw_pass')
                    chat = bot.send_photo(user_id, photo[2], '*–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ä—Ç—É UZCARD –∏–ª–∏ HUMO*',
                                   reply_markup=buttonsbot.return_pay(), parse_mode='Markdown')
                    bot.register_next_step_handler(message, fin_withdraw, id_for_pay, sum, chat)

                elif select_data == '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏':
                    bot.send_message(user_id, '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
                                     reply_markup=buttonsbot.menu_button())
                    bot.register_next_step_handler(message, str_msg)

                elif select_data == '–í–∞–ª—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞–ª—é—Ç—ã –∫–∞—Å—Å—ã. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞':
                    bot.send_message(user_id, '–í–∞–ª—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞–ª—é—Ç—ã –∫–∞—Å—Å—ã. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞')
                    bot.register_next_step_handler(message, str_msg)

                else:
                    bot.send_message(user_id, '–û—à–∏–±–∫–∞, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ !',
                                     reply_markup=buttonsbot.menu_button())
                    bot.register_next_step_handler(message, str_msg)

            elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üö´':
                bot.send_message(user_id, '–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
                bot.register_next_step_handler(message, str_msg)

            else:
                bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ ID')
                bot.register_next_step_handler(message, get_sum_withdraw, chat, chat1)

        except:
            bot.send_message(user_id, '*–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞*', reply_markup=buttonsbot.menu_button(),
                             parse_mode='MarkDown')
            bot.register_next_step_handler(message, str_msg)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üö´':
        bot.send_message(user_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)


def fin_withdraw(message, id_for_pay, sum, chat):
    user_id = message.from_user.id
    card = message.text
    bot.delete_message(user_id, chat.message_id)
    dt_format = "%d-%m-%Y %H:%M:%S"
    a = datetime.now(timezone('Asia/Tashkent'))
    number = bot_bd.view_number(user_id)
    if message.text:
            bot.send_message(user_id, f'üÜî {user_id}\nNumber: {number[1]}\n‚¨Ü–í—ã–ø–ª–∞—Ç–∞: {sum} UZS\n‚¨á–ü–æ–ª—É—á–µ–Ω–∏—è: {sum} UZS'
                                      f'\nüí≥CARD UZS: {card}\nüìÖ–î–∞—Ç–∞: {a.strftime(dt_format)}\nüìù–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–π—Ç–µ‚è≥',
                             reply_markup=buttonsbot.menu_button(), parse_mode='Markdown')
            chanel_id12 = -1001913028408
            bot.send_message(chanel_id12, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\nTelegram : {user_id}\n\n1xBet ID:'
                                          f' {id_for_pay}\n'
                                        f'Pay Amount : `{sum}`\nCard number: `{card}`\nTime : {a.strftime(dt_format)}'
                                          f'\n–°—Ç–∞—Ç—É—Å: –í –æ–∂–∏–¥–∞–Ω–∏–∏‚è≥',
                             parse_mode='Markdown')
            bot_bd.delete_check(user_id)
            print(card)
            bot_bd.save_check(user_id, sum, card, id_for_pay)
            bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞')
        bot.register_next_step_handler(message, fin_withdraw, id_for_pay)


def get_id_pay(message, chat):
    user_id = message.from_user.id
    bot.delete_message(user_id, chat.message_id)
    bot.delete_message(user_id, message.message_id)
    user_id_pay = message.text
    v = str(user_id_pay)
    if 8 <= len(v) <= 9:
        result = requests.get(f'http://ck83858.tw1.ru/api/check.php?user_id={user_id_pay}').text
        result = json.loads(result)
        for i in result['Data']:
            chat = bot.send_message(user_id, f'*üÜîAccount ID: *`{i[0]}`\nüë§*–§.–ò.–û*: {i[2]} {i[3]} {i[4]}\nüí∞–ë–∞–ª–∞–Ω—Å*:'
                                             f' {i[15]}*', parse_mode='Markdown')
            chat1 = bot.send_message(user_id, config.pay_min, parse_mode='Markdown', reply_markup=buttonsbot.return_pay())
            bot.register_next_step_handler(message, get_payment_sum, user_id_pay, chat, chat1)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üö´':
        bot.send_message(user_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    elif message.photo:
        bot.send_message(user_id, '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        bot.send_message(user_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ ID', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)


def get_payment_sum(message, user_id_pay, chat, chat1):
    user_id = message.from_user.id
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üö´':
        bot.send_message(user_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        try:
            sum = message.text
            n = int(sum)
            if 1000 <= n <= 50000000:
                bot.delete_message(user_id, chat.message_id)
                bot.delete_message(user_id, chat1.message_id)
                bot.delete_message(user_id, message.message_id)
                headers = {
                    'device': '6Fk1rB',
                    'user-agent': 'Mozilla/57.36'
                }
                sum1 = int(sum) * 100

                data = {
                    "method": "p2p.create",
                    "params": {
                        "card_id": '6374d26a65f23ea1d3c687f2',
                        "amount": sum1,
                        "description": '–°–ø–∞—Å–∏–±–æ'
                    }
                }

                response = requests.post('https://payme.uz/api/p2p.create', headers=headers, json=data)
                res = response.json()
                print(res)

                csv = {
                    '_id': res['result']['cheque']['_id'],
                    '_url': 'https://checkout.paycom.uz',
                    '_pay_amount': str(sum) + ' UZS',
                    '_pay_url': 'https://checkout.paycom.uz/' + str(res['result']['cheque']['_id'])
                }

                ec = {
                    '_details': csv
                }

                ec2 = {
                    '_result': ec
                }

                print(json.dumps(csv, indent=4))
                link = csv['_pay_url']
                id = csv['_id']
                try:
                    result = requests.get(f'http://ck83858.tw1.ru/api/check.php?user_id={user_id_pay}').text
                    result = json.loads(result)
                    # bot_bd.add_payment(user_id, user_id_pay, sum)
                    for i in result["Data"]:
                        kbi = telebot.types.InlineKeyboardMarkup()
                        button = telebot.types.InlineKeyboardButton('üí∏ –û–ø–ª–∞—Ç–∏—Ç—å', url=link)
                        kbi.add(button)
                        name = (i[2])
                        name1 = (i[3])
                        name2 = (i[4])
                        balance = (i[15])
                        text_info = f'*üÜîAccount ID*: `{i[0]}`\n*üë§–§.–ò.–û*: *{i[2]} {i[3]} {i[4]}*\n*üí∞–ë–∞–ª–∞–Ω—Å*:' \
                                    f' *{i[15]}*\n===============\nüíµ*–°—É–º–º–∞: {sum} UZS' \
                                    f'\nüí∏–£—Å–ª—É–≥–∞: 0 UZS\nüí∞–ö –æ–ø–ª–∞—Ç–µ: {sum} UZS*'
                        chat = bot.send_message(user_id, text_info, parse_mode='Markdown', reply_markup=kbi)
                        chat1 = bot.send_message(user_id,
                                         f'1Ô∏è‚É£ –î–ª—è –æ–ø–ª–∞—Ç—ã: –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {sum} —Å—É–º–æ–≤ –Ω–∞ –Ω–∞—à —Å—á–µ—Ç,'
                                         f' –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ *( üí∏ –û–ø–ª–∞—Ç–∏—Ç—å )* –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ PayMe!\n\n2Ô∏è‚É£ –í —Ç–µ—á–µ–Ω–∏–µ'
                                         f' 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É *( –û–ø–ª–∞—Ç–∏–ª ‚úÖ )*',
                                         reply_markup=buttonsbot.ret_and_accept(), parse_mode='MarkDown')
                        bot.register_next_step_handler(message, check_payme, id, sum, user_id_pay, chat, name, name1, name2, balance, chat1)

                except ValueError:
                    bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞', reply_markup=buttonsbot.menu_button())
                    bot.register_next_step_handler(message, str_msg)

            else:
                bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞', reply_markup=buttonsbot.menu_button())
                bot.register_next_step_handler(message, str_msg)

        except ValueError:
            bot.send_message(user_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞', reply_markup=buttonsbot.menu_button())
            bot.register_next_step_handler(message, str_msg)


def check_payme(message, id, sum, user_id_pay, chat, name, name1, name2, balance, chat1):
    user_id = message.from_user.id
    headers = {
        'device': '6Fk1rB',
        'user-agent': 'Mozilla/57.36'
    }

    transaction_id = id

    data = {
        "method": "cheque.get",
        "params": {
            "id": transaction_id
        }
    }

    response = requests.post('https://payme.uz/api/cheque.get', headers=headers, json=data)
    res = response.json()
    info_succ = res['result']['cheque']['meta']['has_invoice']

    if info_succ == True:
        bot.delete_message(user_id, chat.message_id)
        bot.delete_message(user_id, chat1.message_id)
        bot.delete_message(user_id, message.message_id)
        if res['result']['cheque'] is not None and 'pay_time' in res['result']['cheque']:
            print("Transaction was successful.")
            print(user_id_pay)
            print(sum)
            requests.post('http://ck83858.tw1.ru/api/')
            try:
                phone_number = bot_bd.view_number(user_id)
                dt_format = "%d-%m-%Y %H:%M:%S"
                a = datetime.now(timezone('Asia/Tashkent'))
                add_1xbet = requests.post(f'http://ck83858.tw1.ru/api/pay.php?user_id={user_id_pay}&summa={sum}').text
                print(f'{add_1xbet}\nTelegram id: {user_id}\n1xBetId {user_id_pay}')
                bot.send_message(user_id, f'üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞\nüÜî: {user_id_pay}\nüë§ –§.–ò.–û: {name} {name1} {name2}\nüí∞ –ù–∞ —Å—á–µ—Ç—É: {balance} UZS\nüí∂ –°—É–º–º–∞: {sum}UZS\nüïò {a.strftime(dt_format)}\n‚úÖ –£—Å–ø–µ—à–Ω–æ')
                bot.send_message(user_id, '*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá*', reply_markup=buttonsbot.menu_button(), parse_mode='MarkDown')
                text_info1 = f'*üÜîAccount ID*: `{user_id_pay}`\nNumber: {phone_number[1]}\n*üë§–§.–ò.–û*: *{name} {name1} {name2}*\n*üí∞–ë–∞–ª–∞–Ω—Å*:' \
                             f' *{balance}*\n===============\nüíµ*–°—É–º–º–∞: {sum} UZS' \
                             f'\nüí∏–£—Å–ª—É–≥–∞: 0 UZS*'
                chanel_id12 = -1001913028408
                bot.send_message(chanel_id12, text_info1, parse_mode='MarkDown')
                bot.register_next_step_handler(message, str_msg)

            except:
                bot.send_message(user_id, '–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                                 reply_markup=buttonsbot.support_unsucceful(), parse_mode='MarkDown')
                bot.send_message(user_id, f'*–í–∞—à id* `{user_id}`', reply_markup=buttonsbot.menu_button(),
                                 parse_mode='MarkDown')
                bot.register_next_step_handler(message, str_msg)

    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üö´':
        print("Transaction was cancellation.")
        print(user_id_pay)
        print(sum)
        bot.send_message(user_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)

    else:
        print("Transaction was unsuccessful", user_id)
        bot.send_message(user_id, '–í—ã –µ—à–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏')
        bot.register_next_step_handler(message, check_payme, id, user_id_pay, sum, chat)


@bot.message_handler(commands=['xbet'])
def xbet(message):
    user_id = message.from_user.id
    id = [5225418097, 1819193668]
    if user_id in id:
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—Ç–µ 1xBet ID')
        bot.register_next_step_handler(message, get_id_xbet)
    else:
        bot.send_message(user_id, '–û—à–∏–±–∫–∞', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg)


def get_id_xbet(message):
    user_id = message.from_user.id
    id = message.text
    result = requests.post(f'http://ck83858.tw1.ru/api/check.php?user_id={id}').text
    result = json.loads(result)
    id = result['Data'][0][0]
    name = result['Data'][0][2]
    name1 = result['Data'][0][3]
    name2 = result['Data'][0][4]
    balance = result['Data'][0][15]
    bot.send_message(user_id, f'*1XBET ID: {id}\n–§.–ò.–û: {name} {name1} {name2}\n–ë–∞–ª–∞–Ω—Å: {balance}*',
                     parse_mode='MarkDown')
    bot.register_next_step_handler(message, get_check_for_pay, id)


def get_check_for_pay(message, id):
    user_id = message.from_user.id
    sum = message.text
    requests.post(f'http://ck83858.tw1.ru/api/pay.php?user_id={id}&summa={sum}')
    time.sleep(5)
    result = requests.post(f'http://ck83858.tw1.ru/api/check.php?user_id={id}').text
    result = json.loads(result)
    id = result['Data'][0][0]
    name = result['Data'][0][2]
    name1 = result['Data'][0][3]
    name2 = result['Data'][0][4]
    balance = result['Data'][0][15]
    bot.send_message(user_id, f'*1XBET ID: {id}\n–§.–ò.–û: {name} {name1} {name2}\n–ë–∞–ª–∞–Ω—Å: {balance}*',
                     reply_markup=buttonsbot.menu_button(), parse_mode='MarkDown')
    bot.register_next_step_handler(message, str_msg)


# UZB
@bot.message_handler(commands=['uz'])
def start_message_uz(message):
    user_id = message.from_user.id
    checker = bot_bd.check_user(user_id)
    admin_id = 5225418097
    adm_id = 1819193668
    checker1 = bot_bd.check_id_admin(admin_id)
    if checker1 == True:
        if checker:
            bot.send_message(user_id, text=f'*FlamePayBot* - ga xush kelibsiz.\n'
                                           f'Bot bilan ishlash uchun kerakli bolimni tanlang üëá', parse_mode='Markdown',
                             reply_markup=buttonsbot.menu_button_uz())
            bot.register_next_step_handler(message, str_msg_uz)

        elif message.text == '/admin':
            bot.register_next_step_handler(message, start_admin)

        else:
            bot_bd.add_user(user_id)
            bot.send_message(user_id, text=f'*FlamePayBot* - ga xush kelibsiz.\n'
                                      f'Bot bilan ishlash uchun kerakli bolimni tanlang üëá', parse_mode='Markdown',
                             reply_markup=buttonsbot.menu_button_uz())
            bot.register_next_step_handler(message, str_msg_uz)

    elif message.text == '/start':
        bot.send_message(user_id, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—à–µ–Ω –≤–≤–µ–¥–∏—Ç–µ /start')
        bot.register_next_step_handler(message, start_message)

    elif message.text == '/admin':
        bot.register_next_step_handler(message, start_admin)

    else:
        bot.send_message(user_id, 'Bot vaqtincha ochirilgan', reply_markup=buttonsbot.bot_unsuported())
        bot.register_next_step_handler(message, bot_stop)


@bot.message_handler(chat_types=['text'])
def str_msg_uz(message):
    user_id = message.from_user.id
    if message.text == 'üíµHisobni toldirish':
        admin_id = 1819193668
        photo = bot_bd.view_system(admin_id, 'xid')
        chat = bot.send_photo(user_id, photo[2], '*üíµ 1XBET UZS ID-gizni kiriting :*',
                              reply_markup=buttonsbot.return_pay_uz(), parse_mode='Markdown')
        bot.register_next_step_handler(message, get_id_pay_uz, chat)

    elif message.text == 'üì§Pulni yechib olish':
            admin_id = 1819193668
            photo = bot_bd.view_system(admin_id, 'withdraw')
            chat = bot.send_photo(user_id, photo[2], '*Kassa manzilimiz* :\n*–ì–æ—Ä–æ–¥: –ù—É–∫—É—Å (–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω)*\n'
                                                     '*–£–ª–∏—Ü–∞: –í–µ—á–Ω—ã–π –æ–≥–æ–Ω—å (24/7)*',
                                  reply_markup=buttonsbot.return_pay_uz(), parse_mode='Markdown')
            chat1 = bot.send_message(user_id, 'üíµ* 1XBET UZS ID raqamingizni kiriting *:', parse_mode='Markdown')
            bot.register_next_step_handler(message, get_sum_withdraw_uz, chat, chat1)

    elif message.text == 'Tilni tanglash üá∑üá∫ üá∫üáø':
        user_id = message.from_user.id
        bot.send_message(user_id, 'Tilni tanlang', reply_markup=buttonsbot.set_language())
        bot.register_next_step_handler(message, select_language)

    elif message.text == '‚òéÔ∏è Texnik yordam':
        bot.send_message(user_id, '*Agar sizda botdan foydalanishda savollaringiz yoki'
                                  ' muammolaringiz bolsa:* @FlamePaySupport',
                         reply_markup=buttonsbot.menu_button(), parse_mode='Markdown')
        bot.register_next_step_handler(message, str_msg_uz)

    elif message.text == '/admin':
        bot.register_next_step_handler(message, start_admin)

    elif message.text == '/start':
        bot.send_message(user_id, 'Yana bir bor /start')
        bot.register_next_step_handler(message, start_message_uz)

    elif message.text == '/xbet':
        bot.register_next_step_handler(message, xbet)

    else:
        bot.send_message(user_id, 'Tugmasini ishlating')
        bot.register_next_step_handler(message, str_msg_uz)


def bot_stop_uz(message):
    user_id = message.from_user.id
    bot.send_message(user_id, config.bot_stop, parse_mode='Markdown')
    bot.register_next_step_handler(message, start_message)


def get_sum_withdraw_uz(message, chat, chat1):
    user_id = message.from_user.id
    if message.text:
        id_for_pay = message.text
        bot.delete_message(user_id, chat.message_id)
        bot.delete_message(user_id, chat1.message_id)
        bot.delete_message(user_id, message.message_id)
        try:
            select = requests.post(f'http://ck83858.tw1.ru/api/without.php?user_id={id_for_pay}').text
            select = json.loads(select)
            print(select)
            select_data = select['Data'][0][3]
            print(select)
            sum = select['Data'][0][5]
            print(sum)
            if message.text:
                if select_data == '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ':
                    id = 1819193668
                    photo = bot_bd.view_system(id, 'withdraw_pass')
                    chat = bot.send_photo(user_id, photo[2], '*Plastik karta raqamingizni kiriting:*',
                                   reply_markup=buttonsbot.return_pay_uz(), parse_mode='Markdown')
                    bot.register_next_step_handler(message, fin_withdraw_uz, id_for_pay, sum, chat)

                elif select_data == '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏':
                    bot.send_message(user_id, 'To ªlov so ªrovi tasdiqlanmadi, kutilmoqda',
                                     reply_markup=buttonsbot.menu_button())
                    bot.register_next_step_handler(message, str_msg_uz)

                elif select_data == '–í–∞–ª—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞–ª—é—Ç—ã –∫–∞—Å—Å—ã. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞':
                    bot.send_message(user_id, 'Foydalanuvchining valyutasi kassa valyutasidan farq qiladi. Operatsiya mumkin emas')
                    bot.register_next_step_handler(message, str_msg_uz)

                else:
                    bot.send_message(user_id, 'Xato, pulni olib qo ªyish haqidagi so ªrovingiz topilmadi!',
                                     reply_markup=buttonsbot.menu_button_uz())
                    bot.register_next_step_handler(message, str_msg_uz)

            elif message.text == 'Bekor qilish üö´':
                bot.send_message(user_id, 'Pul yechish bekor qilindi', reply_markup=buttonsbot.menu_button_uz())
                bot.register_next_step_handler(message, str_msg_uz)

            else:
                bot.send_message(user_id, 'Notogri ID')
                bot.register_next_step_handler(message, get_sum_withdraw_uz, chat, chat1)

        except:
            bot.send_message(user_id, '*Pul yechish bekor qilindi*', reply_markup=buttonsbot.menu_button_uz(),
                             parse_mode='MarkDown')
            bot.register_next_step_handler(message, str_msg_uz)

    else:
        bot.send_message(user_id, 'Bekor qilindi', reply_markup=buttonsbot.menu_button_uz())
        bot.register_next_step_handler(message, str_msg_uz)


def fin_withdraw_uz(message, id_for_pay, sum, chat):
    user_id = message.from_user.id
    card = message.text
    bot.delete_message(user_id, chat.message_id)
    dt_format = "%d-%m-%Y %H:%M:%S"
    a = datetime.now(timezone('Asia/Tashkent'))
    number = bot_bd.view_number(user_id)
    if message.text:
        bot.send_message(user_id, f'üÜî {user_id}\n‚¨ÜBerish: {sum} UZS\n‚¨áOlish: {sum} UZS'
                                  f'\nüí≥CARD UZS: {card}\nüìÖSana: {a.strftime(dt_format)}\nüìùStatus: –û–∂–∏–¥–∞–π—Ç–µ‚è≥',
                         reply_markup=buttonsbot.menu_button(), parse_mode='Markdown')
        chanel_id12 = -1001913028408
        bot.send_message(chanel_id12, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\nTelegram : {user_id}\nNumber: {number[1]}\n1xBet ID:'
                                      f' {id_for_pay}\n'
                                    f'Pay Amount : `{sum}`\nCard number: `{card}`\nTime : {a.strftime(dt_format)}'
                                      f'\n–°—Ç–∞—Ç—É—Å: –í –æ–∂–∏–¥–∞–Ω–∏–∏‚è≥',
                         parse_mode='Markdown')
        bot_bd.delete_check(user_id)
        bot_bd.save_check(user_id, sum, card, id_for_pay)
        bot.register_next_step_handler(message, str_msg_uz)

    else:
        bot.send_message(user_id, 'Karta notogri kiritilgan')
        bot.register_next_step_handler(message, fin_withdraw_uz, id_for_pay)


def get_id_pay_uz(message, chat):
    user_id = message.from_user.id
    bot.delete_message(user_id, chat.message_id)
    bot.delete_message(user_id, message.message_id)
    user_id_pay = message.text
    v = str(user_id_pay)
    if 8 <= len(v) <= 9:
        result = requests.get(f'http://ck83858.tw1.ru/api/check.php?user_id={user_id_pay}').text
        result = json.loads(result)
        for i in result['Data']:
            chat = bot.send_message(user_id, f'*üÜîAccount ID: *`{i[0]}`\nüë§*F.I.O*: {i[2]} {i[3]} {i[4]}\nüí∞Balans*:'
                                             f' {i[15]}*', parse_mode='Markdown')
            chat1 = bot.send_message(user_id, config.pay_min_uz, parse_mode='Markdown', reply_markup=buttonsbot.return_pay_uz())
            bot.register_next_step_handler(message, get_payment_sum_uz, user_id_pay, chat, chat1)

    elif message.text == 'Bekor qilish üö´':
        bot.send_message(user_id, 'bekor qilindi', reply_markup=buttonsbot.menu_button_uz())
        bot.register_next_step_handler(message, str_msg_uz)

    elif message.photo:
        bot.send_message(user_id, 'Foto munkin emas', reply_markup=buttonsbot.menu_button_uz())
        bot.register_next_step_handler(message, str_msg_uz)

    else:
        bot.send_message(user_id, 'Notogri ID', reply_markup=buttonsbot.menu_button_uz())
        bot.register_next_step_handler(message, str_msg_uz)


def get_payment_sum_uz(message, user_id_pay, chat, chat1):
    user_id = message.from_user.id
    if message.text == 'Bekor qilish üö´':
        bot.send_message(user_id, 'bekor qilindi', reply_markup=buttonsbot.menu_button_uz())
        bot.register_next_step_handler(message, str_msg_uz)

    else:
        try:
            sum = message.text
            n = int(sum)
            if 1000 <= n <= 50000000:
                bot.delete_message(user_id, chat.message_id)
                bot.delete_message(user_id, chat1.message_id)
                bot.delete_message(user_id, message.message_id)
                headers = {
                    'device': '6Fk1rB',
                    'user-agent': 'Mozilla/57.36'
                }
                sum1 = int(sum) * 100

                data = {
                    "method": "p2p.create",
                    "params": {
                        "card_id": '6374d26a65f23ea1d3c687f2',
                        "amount": sum1,
                        "description": 'Rahmat'
                    }
                }

                response = requests.post('https://payme.uz/api/p2p.create', headers=headers, json=data)
                res = response.json()
                print(res)

                csv = {
                    '_id': res['result']['cheque']['_id'],
                    '_url': 'https://checkout.paycom.uz',
                    '_pay_amount': str(sum) + ' UZS',
                    '_pay_url': 'https://checkout.paycom.uz/' + str(res['result']['cheque']['_id'])
                }

                ec = {
                    '_details': csv
                }

                ec2 = {
                    '_result': ec
                }

                print(json.dumps(csv, indent=4))
                link = csv['_pay_url']
                id = csv['_id']
                try:
                    result = requests.get(f'http://ck83858.tw1.ru/api/check.php?user_id={user_id_pay}').text
                    result = json.loads(result)
                    # bot_bd.add_payment(user_id, user_id_pay, sum)
                    for i in result["Data"]:
                        kbi = telebot.types.InlineKeyboardMarkup()
                        button = telebot.types.InlineKeyboardButton('üí∏ Tolash', url=link)
                        kbi.add(button)
                        name = (i[2])
                        name1 = (i[3])
                        name2 = (i[4])
                        balance = (i[15])
                        text_info = f'*üÜîAccount ID*: `{i[0]}`\n*üë§F.I.O*: *{i[2]} {i[3]} {i[4]}*\n*üí∞Balans*:' \
                                    f' *{i[15]}*\n===============\nüíµ*Summa: {sum} UZS' \
                                    f'\nüí∏Xizmat: 0 UZS\nüí∞Tolovga: {sum} UZS*'
                        chat = bot.send_message(user_id, text_info, parse_mode='Markdown', reply_markup=kbi)
                        chat1 = bot.send_message(user_id,
                                         f'1Ô∏è‚É£ Tolov uchun: Hisobimizga {sum} som otkazishingiz kerak,'
                                         f' quyidagi tugmani bosish orqali *( üí∏ Tolash )* PayMe ilovasida!\n\n'
                                         f'2Ô∏è‚É£ Tolovdan keyin 10 daqiqa ichida tugmani bosishingiz kerak *( Tolandi ‚úÖ )*',
                                         reply_markup=buttonsbot.ret_and_accept_uz(), parse_mode='MarkDown')
                        bot.register_next_step_handler(message, check_payme_uz, id, sum, user_id_pay, chat, name, name1, name2, balance, chat1)

                except ValueError:
                    bot.send_message(user_id, 'Yaroqsiz miqdor', reply_markup=buttonsbot.menu_button())
                    bot.register_next_step_handler(message, str_msg_uz)

            else:
                bot.send_message(user_id, 'Yaroqsiz miqdor', reply_markup=buttonsbot.menu_button())
                bot.register_next_step_handler(message, str_msg_uz)

        except ValueError:
            bot.send_message(user_id, 'Yaroqsiz miqdor', reply_markup=buttonsbot.menu_button())
            bot.register_next_step_handler(message, str_msg_uz)


def check_payme_uz(message, id, sum, user_id_pay, chat, name, name1, name2, balance, chat1):
    user_id = message.from_user.id
    headers = {
        'device': '6Fk1rB',
        'user-agent': 'Mozilla/57.36'
    }

    transaction_id = id

    data = {
        "method": "cheque.get",
        "params": {
            "id": transaction_id
        }
    }

    response = requests.post('https://payme.uz/api/cheque.get', headers=headers, json=data)
    res = response.json()
    info_succ = res['result']['cheque']['meta']['has_invoice']

    if info_succ == True:
        bot.delete_message(user_id, chat.message_id)
        bot.delete_message(user_id, chat1.message_id)
        bot.delete_message(user_id, message.message_id)
        if res['result']['cheque'] is not None and 'pay_time' in res['result']['cheque']:
            print("Transaction was successful.")
            print(user_id_pay)
            print(sum)
            requests.post('http://ck83858.tw1.ru/api/')
            try:
                phone_number = bot_bd.view_number(user_id)
                dt_format = "%d-%m-%Y %H:%M:%S"
                a = datetime.now(timezone('Asia/Tashkent'))
                add_1xbet = requests.post(f'http://ck83858.tw1.ru/api/pay.php?user_id={user_id_pay}&summa={sum}').text
                print(f'{add_1xbet}\nTelegram id: {user_id}\n1xBetId {user_id_pay}')
                bot.send_message(user_id,
                                 f'üíµ Hisobni toldirish\nüÜî: {user_id_pay}\nüë§ –§.–ò.–û: {name} {name1} {name2}\nüí∞ Hisob: {balance} UZS\nüí∂ Summa: {sum}UZS\nüïò {a.strftime(dt_format)}\n‚úÖ Bajarildi', parse_mode='MarkDown')
                bot.send_message(user_id, '*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá*', reply_markup=buttonsbot.menu_button(), parse_mode='MarkDown')
                chanel_id12 = -1001913028408
                text_info1 = f'*üÜîAccount ID*: `{user_id_pay}`\nNumber: {phone_number[1]}\n*üë§F.I.O*: *{name} {name1} {name2}*\n*üí∞Balans*:' \
                             f' *{balance}*\nüíµ*Summa: {sum} UZS'\
                             f'\nüí∏Xizmat: 0 UZS*'
                bot.send_message(chanel_id12, text_info1, parse_mode='MarkDown')
                bot.register_next_step_handler(message, str_msg_uz)

            except:
                bot.send_message(user_id, 'Sizning sorovingiz korib chiqilmadi!\nBu haqda administratorga xabar bering',
                                 reply_markup=buttonsbot.support_unsucceful(), parse_mode='MarkDown')
                bot.send_message(user_id, f'*Sizning ID* `{user_id}`', reply_markup=buttonsbot.menu_button(),
                                 parse_mode='MarkDown')
                bot.register_next_step_handler(message, str_msg_uz)

    elif message.text == 'Bekor qilish üö´':
        print("Transaction was cancellation.")
        print(user_id_pay)
        print(sum)
        bot.send_message(user_id, 'bekor qilindi', reply_markup=buttonsbot.menu_button())
        bot.register_next_step_handler(message, str_msg_uz)

    else:
        print("Transaction was unsuccessful", user_id)
        bot.send_message(user_id, 'Siz hali tolamagansiz')
        bot.register_next_step_handler(message, check_payme_uz, id, user_id_pay, sum, chat)


while True:
    try:
        bot.polling(none_stop=True)
    except:
        time.sleep(15)
bot.polling()
